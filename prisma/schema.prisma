// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  username        String            @unique
  password        String
  scores          Score[]
  KanaQuizSession KanaQuizSession[]
}

model Category {
  id                     Int     @id @default(autoincrement())
  name                   String  @unique
  scoreUnlockRequirement Int
  words                  Word[]
  Score                  Score[]
}

model Word {
  id         Int       @id @default(autoincrement())
  english    String
  romaji     String
  hiragana   String?
  katakana   String?
  kanji      String?
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
}

model Alphabet {
  id                     Int         @id @default(autoincrement())
  kana                   String
  groups                 KanaGroup[]
  scoreUnlockRequirement Int
}

model KanaGroup {
  id                     Int         @id @default(autoincrement())
  name                   String
  scoreUnlockRequirement Int
  characters             Character[]
  Alphabet               Alphabet?   @relation(fields: [alphabetId], references: [id], onDelete: Cascade)
  alphabetId             Int?
  Score                  Score[]
}

model Character {
  id          Int        @id @default(autoincrement())
  romaji      String
  kana        String
  KanaGroup   KanaGroup? @relation(fields: [kanaGroupId], references: [id], onDelete: Cascade)
  kanaGroupId Int?
}

model Score {
  id          Int        @id @default(autoincrement())
  User        User?      @relation(fields: [userId], references: [id])
  userId      Int?
  kanaGroup   KanaGroup? @relation(fields: [kanaGroupId], references: [id])
  kanaGroupId Int?
  category    Category?  @relation(fields: [categoryId], references: [id])
  categoryId  Int?
}

model KanaQuizSession {
  id         Int                 @id @default(autoincrement())
  User       User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  date       DateTime            @default(now())
  challenges KanaQuizChallenge[]
}

model KanaQuizChallenge {
  id                Int              @id @default(autoincrement())
  KanaQuizSession   KanaQuizSession? @relation(fields: [kanaQuizSessionId], references: [id], onDelete: Cascade)
  kanaQuizSessionId Int?
  challenge         String
  options           String[]
  answer            String
  givenAnswer       String?
}
